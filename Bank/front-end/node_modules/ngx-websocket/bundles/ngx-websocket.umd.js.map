{"version":3,"file":"ngx-websocket.umd.js.map","sources":["ng://ngx-websocket/lib/subscribe.ts","ng://ngx-websocket/lib/socket.ts","ng://ngx-websocket/lib/ngx-websocket.service.ts","ng://ngx-websocket/lib/ngx-websocket.component.ts","ng://ngx-websocket/lib/ngx-websocket.module.ts"],"sourcesContent":["export class Subscribe {\n    public type: number; //then: 0, message: 1, catch: 2, finally: 3.\n    public f: Function;\n    constructor(_type: number, _f: Function) {\n        this.type = _type;\n        this.f = _f;\n    }\n}","import { Observable, Subscription } from \"rxjs\";\nimport { Utils } from \"./utils\";\nimport { Subscribe } from \"./subscribe\";\n/**\n * Socket class\n * each socket handles a single WebScoket Connection.\n */\nexport class Socket {\n    private websocket: WebSocket;\n    private _state: string;\n    private _passingData: any;\n    private _receiveData: any;\n    private _openObservable: Observable<any>;\n    private _errorObservable: Observable<any>;\n    private _messageObservable: Observable<any>;\n    private _closeObservable: Observable<any>;\n    private _subscribes: Subscribe[];\n\n    constructor(private url: string) {\n        try {\n            this.websocket = new WebSocket(url);\n        } catch(e) {\n             console.error(e);\n        }\n        this._state = \"closed\";\n        this._subscribes = [];\n        //onOpen\n        this.websocket.addEventListener(\"open\", (e) => {\n            //websocket stream start\n            this.subscribeLoop(true);\n        })\n\n        //onError\n        this.websocket.addEventListener(\"error\", (e) => {\n            console.error(\"websocket onError\");\n        })\n\n        //onMessage\n        // this._messageObservable = Observable.create((observer) => {\n        //     this.websocket.addEventListener(\"message\", (e) => {\n        //         observer.next({\n        //             event: e\n        //         });\n        //         //stream start again\n        //         this.subscribeLoop(false);\n        //     });\n        // });\n\n        //onMessage\n        this.websocket.addEventListener(\"message\", (e) => {\n            this._receiveData = e;\n            //stream start again\n            this.subscribeLoop(false);\n        });\n\n        //onClose\n        this.websocket.addEventListener(\"close\", (e) => {\n            this._state = \"closed\";\n            console.warn(\"websocket onClose\");\n        });\n    }\n\n    /**\n     * reveive data from previous handler, wouldn't block current stream.\n     * @param f \n     */\n    public then(f: (d: any, socket?: Socket) => any): Socket {\n        this._subscribes.push(new Subscribe(0, f));\n        return this;\n    }\n\n    /**\n     * callback funtion when websocket reveive message. \n     * @param f \n     */\n    public message(f: (text: any, d?: any, socket?: Socket, event?: Event) => any): Socket {\n        this._subscribes.push(new Subscribe(1, f));\n        return this;\n    }\n\n    /**\n     * catch error or close state on websocket;\n     */\n    public catch(): Socket {\n        return this;\n    }\n\n    /**\n     * finally handler.\n     */\n    public finally(): Socket {\n        return this;\n    }\n\n    /**\n     * send message via this websocket\n     * @param message \n     */\n    public send(message: string): Socket {\n        try {\n            this.websocket.send(message);\n        } catch (e) {\n            console.error(e);\n        }\n        return this;\n    }\n\n    /**\n     * close websocket\n     */\n    public close(): void {\n        this.websocket.close();\n    }\n\n    /**\n     * traversal subscirbes set, execute action according to item's type\n     * @param init if subscribeLoop is the first tiem to execute, than every 'then' handler before the first message handler will be remove after execute.\n     */\n    public subscribeLoop(init: boolean): void {\n        for (let i = 0, len = this._subscribes.length; i < len; i++) {\n            let sub = this._subscribes[i];\n            \n            if (sub.type === 0) {\n                this._passingData = sub.f(this._passingData, this);\n                if (init === true) this._subscribes[i] = new Subscribe(0, () => {});\n            }\n            if (sub.type === 1) {\n                if (init === true) break;\n                // this._messageObservable.subscribe({\n                //     next(d) {\n                //         socket._passingData = sub.f((d.event.data), socket._passingData, socket, d.event);\n                //     },\n                //     error(msg) {\n                //         //call the catch handler\n                //     }\n                // });\n                this._passingData = sub.f(this._receiveData.data, this._passingData, this, this._receiveData);\n            }\n        }\n    }\n\n    //get state property\n    public get state() {\n        return this._state;\n    }\n\n\n\n}","import { Injectable } from '@angular/core';\nimport { Socket } from './socket';\n\n/**\n * this service provides multiple methods to create websocket, add callback function to websocekt or destory webscoket.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxWebsocketService {\n  //save all the socket opened by this service\n  private sockets: Map<string, Socket>;\n  \n  constructor() {\n    this.sockets = new Map<string, Socket>();\n  }\n\n  public open(url): Socket {\n    if (!this.checkExistence(url)) {\n      let socket = new Socket(url);\n      this.sockets.set(url, socket);\n      return socket;\n    }\n  }\n\n  private checkExistence(url) {\n    this.sockets.forEach((key, value) => {\n      if (key === url) {\n        //check connection state\n        console.warn(\"a websocket with same url has existed\");\n        return true;\n      }\n    })\n    return false;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { NgxWebsocketService } from './ngx-websocket.service';\nimport { Socket } from './socket';\n\n@Component({\n  selector: 'enl-ngx-websocket',\n  template: `\n    <p>\n      ngx-websocket works!\n    </p>\n    <div>\n      <button>åé</button>\n    </div>\n  `,\n  styles: []\n})\nexport class NgxWebsocketComponent {\n  socket: Socket;\n  constructor(private websocketService: NgxWebsocketService,\n    ) {\n      \n     }\n\n\n\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxWebsocketComponent } from './ngx-websocket.component';\n\n@NgModule({\n  imports: [\n  ],\n  declarations: [NgxWebsocketComponent],\n  exports: [NgxWebsocketComponent]\n})\nexport class NgxWebsocketModule { }\n"],"names":["Injectable","Component","NgModule"],"mappings":"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"}
