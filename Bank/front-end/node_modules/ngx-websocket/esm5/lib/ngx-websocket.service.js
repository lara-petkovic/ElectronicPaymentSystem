/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Socket } from './socket';
import * as i0 from "@angular/core";
/**
 * this service provides multiple methods to create websocket, add callback function to websocekt or destory webscoket.
 */
var NgxWebsocketService = /** @class */ (function () {
    function NgxWebsocketService() {
        this.sockets = new Map();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    NgxWebsocketService.prototype.open = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (!this.checkExistence(url)) {
            var /** @type {?} */ socket = new Socket(url);
            this.sockets.set(url, socket);
            return socket;
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    NgxWebsocketService.prototype.checkExistence = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.sockets.forEach(function (key, value) {
            if (key === url) {
                //check connection state
                console.warn("a websocket with same url has existed");
                return true;
            }
        });
        return false;
    };
    NgxWebsocketService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxWebsocketService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxWebsocketService.ngInjectableDef = i0.defineInjectable({ factory: function NgxWebsocketService_Factory() { return new NgxWebsocketService(); }, token: NgxWebsocketService, providedIn: "root" });
    return NgxWebsocketService;
}());
export { NgxWebsocketService };
function NgxWebsocketService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxWebsocketService.prototype.sockets;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXdlYnNvY2tldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnNvY2tldC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtd2Vic29ja2V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7O0lBWWhDO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztLQUMxQzs7Ozs7SUFFTSxrQ0FBSTs7OztjQUFDLEdBQUc7UUFDYixFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlCLHFCQUFJLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUM3QixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDOUIsTUFBTSxDQUFDLE1BQU0sQ0FBQztTQUNmOzs7Ozs7SUFHSyw0Q0FBYzs7OztjQUFDLEdBQUc7UUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFHLEVBQUUsS0FBSztZQUM5QixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQzs7Z0JBRWhCLE9BQU8sQ0FBQyxJQUFJLENBQUMsdUNBQXVDLENBQUMsQ0FBQztnQkFDdEQsTUFBTSxDQUFDLElBQUksQ0FBQzthQUNiO1NBQ0YsQ0FBQyxDQUFBO1FBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQzs7O2dCQTNCaEIsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7Ozs7OEJBUkQ7O1NBU2EsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSAnLi9zb2NrZXQnO1xuXG4vKipcbiAqIHRoaXMgc2VydmljZSBwcm92aWRlcyBtdWx0aXBsZSBtZXRob2RzIHRvIGNyZWF0ZSB3ZWJzb2NrZXQsIGFkZCBjYWxsYmFjayBmdW5jdGlvbiB0byB3ZWJzb2Nla3Qgb3IgZGVzdG9yeSB3ZWJzY29rZXQuXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5neFdlYnNvY2tldFNlcnZpY2Uge1xuICAvL3NhdmUgYWxsIHRoZSBzb2NrZXQgb3BlbmVkIGJ5IHRoaXMgc2VydmljZVxuICBwcml2YXRlIHNvY2tldHM6IE1hcDxzdHJpbmcsIFNvY2tldD47XG4gIFxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnNvY2tldHMgPSBuZXcgTWFwPHN0cmluZywgU29ja2V0PigpO1xuICB9XG5cbiAgcHVibGljIG9wZW4odXJsKTogU29ja2V0IHtcbiAgICBpZiAoIXRoaXMuY2hlY2tFeGlzdGVuY2UodXJsKSkge1xuICAgICAgbGV0IHNvY2tldCA9IG5ldyBTb2NrZXQodXJsKTtcbiAgICAgIHRoaXMuc29ja2V0cy5zZXQodXJsLCBzb2NrZXQpO1xuICAgICAgcmV0dXJuIHNvY2tldDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrRXhpc3RlbmNlKHVybCkge1xuICAgIHRoaXMuc29ja2V0cy5mb3JFYWNoKChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBpZiAoa2V5ID09PSB1cmwpIHtcbiAgICAgICAgLy9jaGVjayBjb25uZWN0aW9uIHN0YXRlXG4gICAgICAgIGNvbnNvbGUud2FybihcImEgd2Vic29ja2V0IHdpdGggc2FtZSB1cmwgaGFzIGV4aXN0ZWRcIik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=