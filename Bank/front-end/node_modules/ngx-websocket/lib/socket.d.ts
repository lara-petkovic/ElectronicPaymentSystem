/**
 * Socket class
 * each socket handles a single WebScoket Connection.
 */
export declare class Socket {
    private url;
    private websocket;
    private _state;
    private _passingData;
    private _receiveData;
    private _openObservable;
    private _errorObservable;
    private _messageObservable;
    private _closeObservable;
    private _subscribes;
    constructor(url: string);
    /**
     * reveive data from previous handler, wouldn't block current stream.
     * @param f
     */
    then(f: (d: any, socket?: Socket) => any): Socket;
    /**
     * callback funtion when websocket reveive message.
     * @param f
     */
    message(f: (text: any, d?: any, socket?: Socket, event?: Event) => any): Socket;
    /**
     * catch error or close state on websocket;
     */
    catch(): Socket;
    /**
     * finally handler.
     */
    finally(): Socket;
    /**
     * send message via this websocket
     * @param message
     */
    send(message: string): Socket;
    /**
     * close websocket
     */
    close(): void;
    /**
     * traversal subscirbes set, execute action according to item's type
     * @param init if subscribeLoop is the first tiem to execute, than every 'then' handler before the first message handler will be remove after execute.
     */
    subscribeLoop(init: boolean): void;
    readonly state: string;
}
