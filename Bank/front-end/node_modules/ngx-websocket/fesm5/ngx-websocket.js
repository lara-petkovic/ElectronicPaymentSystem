import { Injectable, Component, NgModule, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var Subscribe = /** @class */ (function () {
    function Subscribe(_type, _f) {
        this.type = _type;
        this.f = _f;
    }
    return Subscribe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * Socket class
 * each socket handles a single WebScoket Connection.
 */
var  /**
 * Socket class
 * each socket handles a single WebScoket Connection.
 */
Socket = /** @class */ (function () {
    function Socket(url) {
        var _this = this;
        this.url = url;
        try {
            this.websocket = new WebSocket(url);
        }
        catch (/** @type {?} */ e) {
            console.error(e);
        }
        this._state = "closed";
        this._subscribes = [];
        //onOpen
        this.websocket.addEventListener("open", function (e) {
            //websocket stream start
            //websocket stream start
            _this.subscribeLoop(true);
        });
        //onError
        this.websocket.addEventListener("error", function (e) {
            console.error("websocket onError");
        });
        //onMessage
        // this._messageObservable = Observable.create((observer) => {
        //     this.websocket.addEventListener("message", (e) => {
        //         observer.next({
        //             event: e
        //         });
        //         //stream start again
        //         this.subscribeLoop(false);
        //     });
        // });
        //onMessage
        this.websocket.addEventListener("message", function (e) {
            _this._receiveData = e;
            //stream start again
            //stream start again
            _this.subscribeLoop(false);
        });
        //onClose
        this.websocket.addEventListener("close", function (e) {
            _this._state = "closed";
            console.warn("websocket onClose");
        });
    }
    /**
     * reveive data from previous handler, wouldn't block current stream.
     * @param {?} f
     * @return {?}
     */
    Socket.prototype.then = /**
     * reveive data from previous handler, wouldn't block current stream.
     * @param {?} f
     * @return {?}
     */
    function (f) {
        this._subscribes.push(new Subscribe(0, f));
        return this;
    };
    /**
     * callback funtion when websocket reveive message.
     * @param {?} f
     * @return {?}
     */
    Socket.prototype.message = /**
     * callback funtion when websocket reveive message.
     * @param {?} f
     * @return {?}
     */
    function (f) {
        this._subscribes.push(new Subscribe(1, f));
        return this;
    };
    /**
     * catch error or close state on websocket;
     * @return {?}
     */
    Socket.prototype.catch = /**
     * catch error or close state on websocket;
     * @return {?}
     */
    function () {
        return this;
    };
    /**
     * finally handler.
     * @return {?}
     */
    Socket.prototype.finally = /**
     * finally handler.
     * @return {?}
     */
    function () {
        return this;
    };
    /**
     * send message via this websocket
     * @param {?} message
     * @return {?}
     */
    Socket.prototype.send = /**
     * send message via this websocket
     * @param {?} message
     * @return {?}
     */
    function (message) {
        try {
            this.websocket.send(message);
        }
        catch (/** @type {?} */ e) {
            console.error(e);
        }
        return this;
    };
    /**
     * close websocket
     * @return {?}
     */
    Socket.prototype.close = /**
     * close websocket
     * @return {?}
     */
    function () {
        this.websocket.close();
    };
    /**
     * traversal subscirbes set, execute action according to item's type
     * @param {?} init if subscribeLoop is the first tiem to execute, than every 'then' handler before the first message handler will be remove after execute.
     * @return {?}
     */
    Socket.prototype.subscribeLoop = /**
     * traversal subscirbes set, execute action according to item's type
     * @param {?} init if subscribeLoop is the first tiem to execute, than every 'then' handler before the first message handler will be remove after execute.
     * @return {?}
     */
    function (init) {
        for (var /** @type {?} */ i = 0, /** @type {?} */ len = this._subscribes.length; i < len; i++) {
            var /** @type {?} */ sub = this._subscribes[i];
            if (sub.type === 0) {
                this._passingData = sub.f(this._passingData, this);
                if (init === true)
                    this._subscribes[i] = new Subscribe(0, function () { });
            }
            if (sub.type === 1) {
                if (init === true)
                    break;
                // this._messageObservable.subscribe({
                //     next(d) {
                //         socket._passingData = sub.f((d.event.data), socket._passingData, socket, d.event);
                //     },
                //     error(msg) {
                //         //call the catch handler
                //     }
                // });
                this._passingData = sub.f(this._receiveData.data, this._passingData, this, this._receiveData);
            }
        }
    };
    Object.defineProperty(Socket.prototype, "state", {
        get: /**
         * @return {?}
         */
        function () {
            return this._state;
        },
        enumerable: true,
        configurable: true
    });
    return Socket;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * this service provides multiple methods to create websocket, add callback function to websocekt or destory webscoket.
 */
var NgxWebsocketService = /** @class */ (function () {
    function NgxWebsocketService() {
        this.sockets = new Map();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    NgxWebsocketService.prototype.open = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (!this.checkExistence(url)) {
            var /** @type {?} */ socket = new Socket(url);
            this.sockets.set(url, socket);
            return socket;
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    NgxWebsocketService.prototype.checkExistence = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        this.sockets.forEach(function (key, value) {
            if (key === url) {
                //check connection state
                console.warn("a websocket with same url has existed");
                return true;
            }
        });
        return false;
    };
    NgxWebsocketService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] },
    ];
    /** @nocollapse */
    NgxWebsocketService.ctorParameters = function () { return []; };
    /** @nocollapse */ NgxWebsocketService.ngInjectableDef = defineInjectable({ factory: function NgxWebsocketService_Factory() { return new NgxWebsocketService(); }, token: NgxWebsocketService, providedIn: "root" });
    return NgxWebsocketService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxWebsocketComponent = /** @class */ (function () {
    function NgxWebsocketComponent(websocketService) {
        this.websocketService = websocketService;
    }
    NgxWebsocketComponent.decorators = [
        { type: Component, args: [{
                    selector: 'enl-ngx-websocket',
                    template: "\n    <p>\n      ngx-websocket works!\n    </p>\n    <div>\n      <button>\u53D1\u9001</button>\n    </div>\n  ",
                    styles: []
                },] },
    ];
    /** @nocollapse */
    NgxWebsocketComponent.ctorParameters = function () { return [
        { type: NgxWebsocketService }
    ]; };
    return NgxWebsocketComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var NgxWebsocketModule = /** @class */ (function () {
    function NgxWebsocketModule() {
    }
    NgxWebsocketModule.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [NgxWebsocketComponent],
                    exports: [NgxWebsocketComponent]
                },] },
    ];
    return NgxWebsocketModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { NgxWebsocketService, NgxWebsocketComponent, NgxWebsocketModule, Socket };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,