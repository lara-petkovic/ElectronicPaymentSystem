/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Socket } from './socket';
import * as i0 from "@angular/core";
/**
 * this service provides multiple methods to create websocket, add callback function to websocekt or destory webscoket.
 */
export class NgxWebsocketService {
    constructor() {
        this.sockets = new Map();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    open(url) {
        if (!this.checkExistence(url)) {
            let /** @type {?} */ socket = new Socket(url);
            this.sockets.set(url, socket);
            return socket;
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    checkExistence(url) {
        this.sockets.forEach((key, value) => {
            if (key === url) {
                //check connection state
                console.warn("a websocket with same url has existed");
                return true;
            }
        });
        return false;
    }
}
NgxWebsocketService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
NgxWebsocketService.ctorParameters = () => [];
/** @nocollapse */ NgxWebsocketService.ngInjectableDef = i0.defineInjectable({ factory: function NgxWebsocketService_Factory() { return new NgxWebsocketService(); }, token: NgxWebsocketService, providedIn: "root" });
function NgxWebsocketService_tsickle_Closure_declarations() {
    /** @type {?} */
    NgxWebsocketService.prototype.sockets;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXdlYnNvY2tldC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnNvY2tldC8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtd2Vic29ja2V0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFRbEMsTUFBTTtJQUlKO1FBQ0UsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLEdBQUcsRUFBa0IsQ0FBQztLQUMxQzs7Ozs7SUFFTSxJQUFJLENBQUMsR0FBRztRQUNiLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIscUJBQUksTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUM5QixNQUFNLENBQUMsTUFBTSxDQUFDO1NBQ2Y7Ozs7OztJQUdLLGNBQWMsQ0FBQyxHQUFHO1FBQ3hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ2xDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDOztnQkFFaEIsT0FBTyxDQUFDLElBQUksQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNLENBQUMsSUFBSSxDQUFDO2FBQ2I7U0FDRixDQUFDLENBQUE7UUFDRixNQUFNLENBQUMsS0FBSyxDQUFDOzs7O1lBM0JoQixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBTb2NrZXQgfSBmcm9tICcuL3NvY2tldCc7XG5cbi8qKlxuICogdGhpcyBzZXJ2aWNlIHByb3ZpZGVzIG11bHRpcGxlIG1ldGhvZHMgdG8gY3JlYXRlIHdlYnNvY2tldCwgYWRkIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHdlYnNvY2VrdCBvciBkZXN0b3J5IHdlYnNjb2tldC5cbiAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4V2Vic29ja2V0U2VydmljZSB7XG4gIC8vc2F2ZSBhbGwgdGhlIHNvY2tldCBvcGVuZWQgYnkgdGhpcyBzZXJ2aWNlXG4gIHByaXZhdGUgc29ja2V0czogTWFwPHN0cmluZywgU29ja2V0PjtcbiAgXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc29ja2V0cyA9IG5ldyBNYXA8c3RyaW5nLCBTb2NrZXQ+KCk7XG4gIH1cblxuICBwdWJsaWMgb3Blbih1cmwpOiBTb2NrZXQge1xuICAgIGlmICghdGhpcy5jaGVja0V4aXN0ZW5jZSh1cmwpKSB7XG4gICAgICBsZXQgc29ja2V0ID0gbmV3IFNvY2tldCh1cmwpO1xuICAgICAgdGhpcy5zb2NrZXRzLnNldCh1cmwsIHNvY2tldCk7XG4gICAgICByZXR1cm4gc29ja2V0O1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tFeGlzdGVuY2UodXJsKSB7XG4gICAgdGhpcy5zb2NrZXRzLmZvckVhY2goKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIGlmIChrZXkgPT09IHVybCkge1xuICAgICAgICAvL2NoZWNrIGNvbm5lY3Rpb24gc3RhdGVcbiAgICAgICAgY29uc29sZS53YXJuKFwiYSB3ZWJzb2NrZXQgd2l0aCBzYW1lIHVybCBoYXMgZXhpc3RlZFwiKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbiJdfQ==