/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Subscribe } from "./subscribe";
/**
 * Socket class
 * each socket handles a single WebScoket Connection.
 */
export class Socket {
    /**
     * @param {?} url
     */
    constructor(url) {
        this.url = url;
        try {
            this.websocket = new WebSocket(url);
        }
        catch (/** @type {?} */ e) {
            console.error(e);
        }
        this._state = "closed";
        this._subscribes = [];
        //onOpen
        this.websocket.addEventListener("open", (e) => {
            //websocket stream start
            this.subscribeLoop(true);
        });
        //onError
        this.websocket.addEventListener("error", (e) => {
            console.error("websocket onError");
        });
        //onMessage
        // this._messageObservable = Observable.create((observer) => {
        //     this.websocket.addEventListener("message", (e) => {
        //         observer.next({
        //             event: e
        //         });
        //         //stream start again
        //         this.subscribeLoop(false);
        //     });
        // });
        //onMessage
        this.websocket.addEventListener("message", (e) => {
            this._receiveData = e;
            //stream start again
            this.subscribeLoop(false);
        });
        //onClose
        this.websocket.addEventListener("close", (e) => {
            this._state = "closed";
            console.warn("websocket onClose");
        });
    }
    /**
     * reveive data from previous handler, wouldn't block current stream.
     * @param {?} f
     * @return {?}
     */
    then(f) {
        this._subscribes.push(new Subscribe(0, f));
        return this;
    }
    /**
     * callback funtion when websocket reveive message.
     * @param {?} f
     * @return {?}
     */
    message(f) {
        this._subscribes.push(new Subscribe(1, f));
        return this;
    }
    /**
     * catch error or close state on websocket;
     * @return {?}
     */
    catch() {
        return this;
    }
    /**
     * finally handler.
     * @return {?}
     */
    finally() {
        return this;
    }
    /**
     * send message via this websocket
     * @param {?} message
     * @return {?}
     */
    send(message) {
        try {
            this.websocket.send(message);
        }
        catch (/** @type {?} */ e) {
            console.error(e);
        }
        return this;
    }
    /**
     * close websocket
     * @return {?}
     */
    close() {
        this.websocket.close();
    }
    /**
     * traversal subscirbes set, execute action according to item's type
     * @param {?} init if subscribeLoop is the first tiem to execute, than every 'then' handler before the first message handler will be remove after execute.
     * @return {?}
     */
    subscribeLoop(init) {
        for (let /** @type {?} */ i = 0, /** @type {?} */ len = this._subscribes.length; i < len; i++) {
            let /** @type {?} */ sub = this._subscribes[i];
            if (sub.type === 0) {
                this._passingData = sub.f(this._passingData, this);
                if (init === true)
                    this._subscribes[i] = new Subscribe(0, () => { });
            }
            if (sub.type === 1) {
                if (init === true)
                    break;
                // this._messageObservable.subscribe({
                //     next(d) {
                //         socket._passingData = sub.f((d.event.data), socket._passingData, socket, d.event);
                //     },
                //     error(msg) {
                //         //call the catch handler
                //     }
                // });
                this._passingData = sub.f(this._receiveData.data, this._passingData, this, this._receiveData);
            }
        }
    }
    /**
     * @return {?}
     */
    get state() {
        return this._state;
    }
}
function Socket_tsickle_Closure_declarations() {
    /** @type {?} */
    Socket.prototype.websocket;
    /** @type {?} */
    Socket.prototype._state;
    /** @type {?} */
    Socket.prototype._passingData;
    /** @type {?} */
    Socket.prototype._receiveData;
    /** @type {?} */
    Socket.prototype._openObservable;
    /** @type {?} */
    Socket.prototype._errorObservable;
    /** @type {?} */
    Socket.prototype._messageObservable;
    /** @type {?} */
    Socket.prototype._closeObservable;
    /** @type {?} */
    Socket.prototype._subscribes;
    /** @type {?} */
    Socket.prototype.url;
}

//# sourceMappingURL=data:application/json;base64,